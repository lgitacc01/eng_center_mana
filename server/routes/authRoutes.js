import express from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';

const router = express.Router();

// --- CH·ªà C√íN ƒêƒÇNG NH·∫¨P (Login) ---
router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    // T√¨m user
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(400).json({ msg: 'Sai th√¥ng tin ƒëƒÉng nh·∫≠p' });
    }

    // So s√°nh m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ msg: 'Sai th√¥ng tin ƒëƒÉng nh·∫≠p' });
    }

    // --- T·∫†O TOKEN ---
    // 1. T·∫°o Access Token Payload (Token ch√≠nh, ng·∫Øn h·∫°n)
    const accessTokenPayload = {
      user: {
        id: user._id,
        user_id: user.user_id,
        username: user.username,
        full_name: user.full_name,
        role: user.role_id
      }
    };

    // 2. T·∫°o Refresh Token Payload (Token l√†m m·ªõi, d√†i h·∫°n)
    // (Ch·ªâ c·∫ßn ID ƒë·ªÉ bi·∫øt user n√†o mu·ªën l√†m m·ªõi)
    const refreshTokenPayload = {
      user: {
        id: user._id
      }
    };

    // 3. K√Ω (Sign) c·∫£ hai token
    const accessToken = jwt.sign(
      accessTokenPayload,
      process.env.JWT_SECRET,
      { expiresIn: '15m' } // üëà ƒê·ªïi th√†nh 15 ph√∫t (ng·∫Øn h·∫°n)
    );

    const refreshToken = jwt.sign(
      refreshTokenPayload,
      process.env.JWT_REFRESH_SECRET, // üëà D√πng kh√≥a b√≠ m·∫≠t M·ªöI
      { expiresIn: '7d' } // üëà H·∫øt h·∫°n sau 7 ng√†y
    );

    // G·ª≠i C·∫¢ HAI token v·ªÅ cho client
    res.json({ accessToken, refreshToken }); // üëà THAY ƒê·ªîI

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});


// --- TH√äM M·ªöI: ROUTE ƒê·ªÇ L√ÄM M·ªöI TOKEN ---
// Endpoint: /auth/refresh
router.post('/refresh', async (req, res) => {
  // Client s·∫Ω g·ª≠i refreshToken trong body
  const { token: refreshToken } = req.body;

  if (!refreshToken) {
    return res.status(401).json({ msg: 'Kh√¥ng c√≥ refresh token' });
  }

  try {
    // 1. X√°c th·ª±c Refresh Token
    const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);
    
    // 2. N·∫øu h·ª£p l·ªá, t√¨m user trong DB
    const user = await User.findById(decoded.user.id);
    if (!user) {
      return res.status(403).json({ msg: 'Token kh√¥ng h·ª£p l·ªá (user kh√¥ng t·ªìn t·∫°i)' });
    }

    // 3. T·∫°o l·∫°i Access Token M·ªöI (v·∫´n 15 ph√∫t)
    const newAccessTokenPayload = {
      user: {
        id: user._id,
        user_id: user.user_id,
        username: user.username,
        full_name: user.full_name,
        role: user.role_id
      }
    };

    const newAccessToken = jwt.sign(
      newAccessTokenPayload,
      process.env.JWT_SECRET,
      { expiresIn: '15m' }
    );

    // 4. G·ª≠i Access Token m·ªõi v·ªÅ
    res.json({ accessToken: newAccessToken });

  } catch (err) {
    return res.status(403).json({ msg: 'Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
  }
});


export default router;