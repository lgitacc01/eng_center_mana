// File: services/apiConfig.js

import axios from 'axios';

// 1. T·∫†O INSTANCE AXIOS
const api = axios.create({
  // URL g·ªëc c·ªßa backend (KH√îNG C√ì /api)
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000', // üëà ƒê√É S·ª¨A
  headers: {
    'Content-Type': 'application/json',
  }
});

// 2. INTERCEPTOR G·ª¨I REQUEST (G·∫Øn accessToken)
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('accessToken'); 
    if (token) {
      config.headers['Authorization'] = 'Bearer ' + token;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// 3. INTERCEPTOR NH·∫¨N RESPONSE (X·ª≠ l√Ω khi accessToken h·∫øt h·∫°n)
api.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // Ki·ªÉm tra n·∫øu l·ªói 401 v√† ch∆∞a th·ª≠ l·∫°i
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true; 

      try {
        const refreshToken = localStorage.getItem('refreshToken');

        // G·ªåI API /auth/refresh
        // L∆∞u √Ω: ƒê∆∞·ªùng d·∫´n n√†y ph·∫£i kh·ªõp v·ªõi c√°ch b·∫°n g·ªçi login,
        // v√≠ d·ª•: n·∫øu b·∫°n login b·∫±ng '/auth/login' th√¨ refresh l√† '/auth/refresh'
        const rs = await axios.post(`${api.defaults.baseURL}/auth/refresh`, { // üëà ƒê√É S·ª¨A
          token: refreshToken,
        });

        // L·∫•y accessToken m·ªõi
        const { accessToken: newAccessToken } = rs.data;

        // L∆∞u token m·ªõi
        localStorage.setItem('accessToken', newAccessToken);

        // C·∫≠p nh·∫≠t header v√† g·ªçi l·∫°i request g·ªëc
        originalRequest.headers['Authorization'] = 'Bearer ' + newAccessToken;
        return api(originalRequest);

      } catch (_error) {
        // N·∫æU REFRESH TOKEN H·∫æT H·∫†N
        console.error("Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
        
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('role');
        
        // ƒê·∫©y v·ªÅ trang login (gi·∫£ s·ª≠ trang login c·ªßa b·∫°n l√† /login)
        window.location.href = '/login'; 
        
        return Promise.reject(_error);
      }
    }

    // Tr·∫£ v·ªÅ c√°c l·ªói kh√°c
    return Promise.reject(error);
  }
);

// 4. EXPORT INSTANCE
export default api;